#version 450

#extension GL_KHR_shader_subgroup_arithmetic : require

#include "types.comp"

layout (push_constant) uniform parameter
{
    uint ne;
    uint batches;
    uint c_in;
    uint c_out;
    uint dst_w;
    uint dst_h;
    uint src_w;
    uint src_h;
    uint knl_w;
    uint knl_h;    
    uint stride_x;
    uint stride_y;
} p;

layout (binding = 0) readonly buffer A {A_TYPE knl_data[];};
layout (binding = 1) readonly buffer B {B_TYPE src_data[];};
layout (binding = 2) writeonly buffer D {D_TYPE dst_data[];};

layout(constant_id = 0) const uint BLOCK_SIZE = 32;

layout(local_size_x_id = 0, local_size_y = 1, local_size_z = 1) in;

FLOAT_TYPE conv_transpose_2d_cwhn(uint idx) {
    uint i0 = idx / p.c_out;
    uint dst_c = idx - i0 * p.c_out;
    uint i1 = i0 / p.dst_w;
    uint dst_x = i0 - i1 * p.dst_w;
    uint n = i1 / p.dst_h;
    uint dst_y = i1 - n * p.dst_h;

    uint src_row = p.src_w * p.c_in;
    uint src_base = n * p.src_h * src_row;

    uint knl_row = p.knl_w * p.c_in;
    uint knl_base = dst_c * p.knl_h * knl_row;

    FLOAT_TYPE sum = 0.0;
    for (uint knl_y = 0; knl_y < p.knl_h; ++knl_y) {
        if (knl_y > dst_y) {
            continue;
        }
        uint off_y = dst_y - knl_y;
        uint src_y = off_y / p.stride_y;
        if (src_y >= p.src_h || off_y % p.stride_y != 0) {
            continue;
        }
        for (uint knl_x = 0; knl_x < p.knl_w; ++knl_x) {
            if (knl_x > dst_x) {
                continue;
            }
            uint off_x = dst_x - knl_x;
            uint src_x = off_x / p.stride_x;
            if (src_x >= p.src_w || off_x % p.stride_x != 0) {
                continue;
            }
            uint src_i = src_base + src_y * src_row + src_x * p.c_in;
            uint knl_i = knl_base + knl_y * knl_row + knl_x * p.c_in;

            for (uint c = gl_LocalInvocationID.x; c < p.c_in; c += BLOCK_SIZE) {
                sum = fma(
                    FLOAT_TYPE(src_data[src_i + c]),
                    FLOAT_TYPE(knl_data[knl_i + c]),
                    sum);
            }
        }
    }
    return subgroupAdd(sum);
}

void main() {
    uint idx = gl_WorkGroupID.z * 262144 + gl_WorkGroupID.y * 512 + gl_WorkGroupID.x;
    if (idx >= p.ne) {
        return;
    }

    dst_data[idx] = D_TYPE(conv_transpose_2d_cwhn(idx));
}
